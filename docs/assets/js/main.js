(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{1:function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},18:function(t,e,n){n(19),n(40),t.exports=n(45)},19:function(t,e,n){"use strict";n.r(e);n(5),n(20)},2:function(t,e){var n,i,o=t.exports={};function r(){throw new Error("setTimeout has not been defined")}function c(){throw new Error("clearTimeout has not been defined")}function a(t){if(n===setTimeout)return setTimeout(t,0);if((n===r||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:r}catch(t){n=r}try{i="function"==typeof clearTimeout?clearTimeout:c}catch(t){i=c}}();var s,l=[],u=!1,d=-1;function f(){u&&s&&(u=!1,s.length?l=s.concat(l):d=-1,l.length&&p())}function p(){if(!u){var t=a(f);u=!0;for(var e=l.length;e;){for(s=l,l=[];++d<e;)s&&s[d].run();d=-1,e=l.length}s=null,u=!1,function(t){if(i===clearTimeout)return clearTimeout(t);if((i===c||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(t);try{i(t)}catch(e){try{return i.call(null,t)}catch(e){return i.call(this,t)}}}(t)}}function h(t,e){this.fun=t,this.array=e}function m(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];l.push(new h(t,e)),1!==l.length||u||a(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},20:function(t,e,n){"use strict";(function(t,e){var i=n(4);function o(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}new t({el:"#app",data:{cards:i,cardLength:i.length,cardtest:[],addText:null,removeText:null,select:{col:{state:4,active:!1,show:!1,list:[{id:1},{id:2},{id:3},{id:4},{id:5},{id:6},{id:7},{id:8},{id:9},{id:10}]},rowgap:{state:30,active:!1,show:!1,list:[{id:0},{id:5},{id:10},{id:15},{id:20},{id:25},{id:30},{id:35},{id:40},{id:45},{id:50}]},colgap:{state:20,active:!1,show:!1,list:[{id:0},{id:5},{id:10},{id:15},{id:20},{id:25},{id:30}]}}},methods:{rowStyle:function(){return{marginTop:"-".concat(this.select.rowgap.state,"px"),marginLeft:"-".concat(this.select.colgap.state,"px")}},colStyle:function(){var t=1/Number(this.select.col.state)*100;return{paddingTop:"".concat(this.select.rowgap.state,"px"),paddingLeft:"".concat(this.select.colgap.state,"px"),width:"".concat(t,"%")}},StyleWidth:function(){return Math.floor(1/Number(this.select.col.state)*100*1e4)/1e4},shuffle:function(){this.cards=e.shuffle(this.cards)},add:function(){if(this.cards.length+1<=this.cardLength){var t=this.cardtest[this.cardtest.length-1];this.cardtest.pop(),this.cards.push(t),this.addText=null,this.removeText=null}else this.addText="これ以上追加できません"},remove:function(){if(this.cards.length>=1){var t=this.cards[this.cards.length-1];this.cardtest=[].concat(o(this.cardtest),[t]),this.cards.pop(),this.addText=null,this.removeText=null}else this.removeText="これ以上削除できません"},selectEv:function(t,e){"number"==typeof e&&(t.state=e),t.show=!t.show}}})}).call(this,n(6),n(8))},3:function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var i,o,r,c,a,s=1,l={},u=!1,d=t.document,f=Object.getPrototypeOf&&Object.getPrototypeOf(t);f=f&&f.setTimeout?f:t,"[object process]"==={}.toString.call(t.process)?i=function(t){e.nextTick((function(){h(t)}))}:!function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?t.MessageChannel?((r=new MessageChannel).port1.onmessage=function(t){h(t.data)},i=function(t){r.port2.postMessage(t)}):d&&"onreadystatechange"in d.createElement("script")?(o=d.documentElement,i=function(t){var e=d.createElement("script");e.onreadystatechange=function(){h(t),e.onreadystatechange=null,o.removeChild(e),e=null},o.appendChild(e)}):i=function(t){setTimeout(h,0,t)}:(c="setImmediate$"+Math.random()+"$",a=function(e){e.source===t&&"string"==typeof e.data&&0===e.data.indexOf(c)&&h(+e.data.slice(c.length))},t.addEventListener?t.addEventListener("message",a,!1):t.attachEvent("onmessage",a),i=function(e){t.postMessage(c+e,"*")}),f.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var o={callback:t,args:e};return l[s]=o,i(s),s++},f.clearImmediate=p}function p(t){delete l[t]}function h(t){if(u)setTimeout(h,0,t);else{var e=l[t];if(e){u=!0;try{!function(t){var e=t.callback,i=t.args;switch(i.length){case 0:e();break;case 1:e(i[0]);break;case 2:e(i[0],i[1]);break;case 3:e(i[0],i[1],i[2]);break;default:e.apply(n,i)}}(e)}finally{p(t),u=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(1),n(2))},4:function(t){t.exports=JSON.parse('[{"title":"タイトル1","text":"テキスト1テキスト1テキスト1テキスト1テキスト1テキスト1テキスト1テキスト1テキスト1","img":"cat01.jpg","link":"//www.pexels.com/photo/animals-sweet-cat-kitty-57416/"},{"title":"タイトル2","text":"テキスト2","img":"cat02.jpg","link":"//www.pexels.com/photo/animal-pet-cute-kitten-45201/"},{"title":"タイトル3","text":"テキスト3","img":"cat03.jpg","link":"//www.pexels.com/photo/close-up-photography-of-sleeping-tabby-cat-1056251/"},{"title":"タイトル4","text":"テキスト4","img":"cat04.jpg","link":"//www.pexels.com/photo/light-landscape-sky-sunset-35888/"},{"title":"タイトル5","text":"テキスト5","img":"cat05.jpg","link":"//www.pexels.com/photo/black-cat-walking-on-road-1510543/"},{"title":"タイトル6","text":"テキスト6","img":"cat06.jpg","link":"#"},{"title":"タイトル7","text":"テキスト7","img":"cat07.jpg","link":"//www.pexels.com/photo/close-up-photo-of-brown-and-white-kitten-1870376/"},{"title":"タイトル8","text":"テキスト8","img":"cat08.jpg","link":"#"}]')},40:function(t,e){},45:function(t,e){},7:function(t,e,n){(function(t){var i=void 0!==t&&t||"undefined"!=typeof self&&self||window,o=Function.prototype.apply;function r(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new r(o.call(setTimeout,i,arguments),clearTimeout)},e.setInterval=function(){return new r(o.call(setInterval,i,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},r.prototype.unref=r.prototype.ref=function(){},r.prototype.close=function(){this._clearFn.call(i,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout((function(){t._onTimeout&&t._onTimeout()}),e))},n(3),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(1))},9:function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}}},[[18,1,2]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,